openapi: 3.0.3
servers:
  - url: https://{baseUrl}
    description: The production API server
    variables:
      baseUrl:
        default: api.apigwuri.notset
info:
  title: HiveMQ Cloud Public REST API
  x-logo:
    url: https://www.hivemq.com/img/svg/hivemq-bee.svg
  description: |2

    # Introduction

    HiveMQ Cloud offers REST APIs designed to seamlessly extend your MQTT workflows programmatically.
    These APIs enable users to perform a variety of actions related to client credential management and access control.

    HiveMQ Cloud REST API provides endpoints for the following use cases:
    - Listing all MQTT Credentials
    - Listing all roles and permissions
    - Assign and un-assign permissions to roles
    - Assign and un-assign user to roles
    - Listing all MQTT Clients
    - Getting detailed information about a specific MQTT client
    - Listing all subscriptions for a specific MQTT client
    - Getting the connection status for a specific MQTT client

  contact:
    email: support@hivemq.com
  version: 1.0.0
externalDocs:
  description: HiveMQ Cloud documentation
  url: https://docs.hivemq.com/hivemq-cloud/introduction
tags:
  - name: Metrics
    description: Broker metrics
    externalDocs:
      description: Find out more
      url: http://hivemq.com
  - name: MQTT Credentials
    description: Manage MQTT credentials
    externalDocs:
      description: Find out more
      url: http://hivemq.com
  - name: MQTT Permissions
    description: Manage MQTT permissions
    externalDocs:
      description: Find out more
      url: http://hivemq.com
  - name: MQTT Roles
    description: Manage MQTT Roles
    externalDocs:
      description: Find out more
      url: http://hivemq.com
  - name: User - Roles
    description: User - Roles Management
    externalDocs:
      description: Find out more
      url: http://hivemq.com
  - name: Clients Authentication
    description: clients authentication
    externalDocs:
      description: Find out more
      url: http://hivemq.com
  - name: Kafka Extensions
    description: Manage Kafka extension configuration
    externalDocs:
      description: Find out more
      url: http://hivemq.com
paths:
  /api/v2/orgs/{orgId}/clusters/{clusterId}/metrics:
    get:
      tags:
        - Metrics
      summary: expose OTEL broker metrics
      operationId: brokerOtelMetrics
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful request
          content:
            text/plain:
              schema:
                type: string
  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/credentials:
    post:
      tags:
        - MQTT Credentials
      summary: Creates new credentials
      operationId: createMqttCredentials
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertCredentialsRequest"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Account, cluster, org, etc. does not exist
  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/credentials/username/{username}:
    get:
      tags:
        - MQTT Credentials
      summary: Get MQTT credentials by username
      operationId: getMqttCredentials
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialsListResponse"
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Either Org, clusterId or username do not exist
    delete:
      tags:
        - MQTT Credentials
      summary: Delete credentials
      operationId: deleteMqttCredentials
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully deleted
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Account, cluster, org, etc. does not exist

  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/permissions:
    get:
      tags:
        - MQTT Permissions
      summary: List all valid permissions for MQTT users in a selected cluster.
      operationId: listMqttPermissions
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List all valid permissions for the given cluster.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MQTTPermissionResponse'
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
    post:
      tags:
        - MQTT Permissions
      summary: Create a new permission to assign to MQTT users
      operationId: createMqttPermission
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertPermissionRequest"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MQTTPermissionResponse"
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Account, cluster, org, etc. does not exist
    put:
      tags:
        - MQTT Permissions
      summary: Replace permissions
      operationId: updateMqttPermissionList
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertPermissionListRequest"
      responses:
        200:
          description: successful operation
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Account, cluster, org, etc. does not exist
  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/permissions/{id}:
    put:
      tags:
        - MQTT Permissions
      summary: Update permission
      operationId: updateMqttPermission
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertPermissionRequest"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MQTTPermissionResponse"
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Account, cluster, org, etc. does not exist
    delete:
      tags:
        - MQTT Permissions
      summary: Delete permission
      operationId: deleteMqttPermission
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully deleted
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Account, cluster, org, etc. does not exist

  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/roles:
    get:
      tags:
        - MQTT Roles
      summary: List all valid roles for MQTT users in a selected cluster.
      operationId: listMqttRoles
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List all valid roles for the given cluster.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RolesListResponse'
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
    post:
      tags:
        - MQTT Roles
      summary: Create a new role for MQTT credentials
      operationId: createMqttRoles
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertRoleRequest"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleInfo"
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Account, cluster, org, etc. does not exist
  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/roles/{roleId}:
    put:
      tags:
        - MQTT Roles
      summary: update a specific role
      operationId: updateRole
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MQTTRole"
      responses:
        204:
          description: successfully updated
    delete:
      tags:
        - MQTT Roles
      summary: Delete role
      operationId: deleteMqttRole
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          description: Role ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully deleted
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Either orgId, cluster, org or roleName. does not exist
  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/roles/permissions:
    get:
      tags:
        - MQTT Roles
      summary: List all valid roles for MQTT users in a selected cluster.
      operationId: listMqttRolePermissions
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List role permissions for the given cluster.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RolePermissionsListResponse'
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/roles/{roleId}/permissions:
    get:
      tags:
        - MQTT Roles
      summary: List all valid roles for MQTT users in a selected cluster by role name.
      operationId: listMqttPermissionsByRole
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List role permissions for the given cluster and role name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MqttRolePermissionsByRoleResponse'
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/roles/{roleId}/permissions/{permissionId}/attach:
    put:
      tags:
        - MQTT Roles
      summary: Attach permission to role
      operationId: attachMqttRolePermission
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Attached permission to role for the given cluster.
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/roles/{roleId}/permissions/{permissionId}/detach:
    put:
      tags:
        - MQTT Roles
      summary: Detach permission from role
      operationId: detachMqttRolePermission
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detached permission from role for the given cluster.
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
  /api/v2/orgs/{orgId}/clusters/{clusterId}/user/{username}/roles:
    get:
      tags:
        - User - Roles
      summary: List all roles by user
      operationId: listMqttCredentialRoles
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List users / roles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRolesListResponse'
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
  /api/v2/orgs/{orgId}/clusters/{clusterId}/user/{username}/roles/{roleId}/detach:
    put:
      tags:
        - User - Roles
      summary: detach user role
      operationId: detachMqttCredentialRole
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          description: Role ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: role detached successfully.
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
  /api/v2/orgs/{orgId}/clusters/{clusterId}/user/{username}/roles/{roleId}/attach:
    put:
      tags:
        - User - Roles
      summary: attach user role
      operationId: attachMqttCredentialRole
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          description: Role ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: role attached successfully.
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/clients:
    get:
      description: |-
        Lists all client sessions (online and offline) known to the whole HiveMQ cluster.

        The result contains each client's client identifier. For more details about each client you can call the endpoints that have a clientId in their URL.

        This endpoint uses pagination with a cursor.
        The results are not sorted in any way, no ordering of any kind is guaranteed.

        This endpoint requires at least HiveMQ version 4.4.0. on all cluster nodes.
      operationId: getAllMqttClients
      parameters:
        - description: Specifies the page size for the returned results. Has to be between
            50 and 2500. Default page size is 500.
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: The cursor that has been returned by the previous result page.
            Do not pass this parameter if you want to fetch the first page.
          in: query
          name: cursor
          schema:
            type: string
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                empty-results:
                  description: Empty result if no clients are known.
                  summary: Empty result if no clients are known
                  value:
                    items: []
                multiple-results-last-page:
                  description: Example response with multiple clients. No more pages
                    left.
                  summary: "Multiple results, last page"
                  value:
                    items:
                      - id: client-12
                      - id: client-5
                      - id: client-32
                      - id: my-client-id2
                      - id: my-client-id
                multiple-results-pages-left:
                  description: Example response with multiple clients. More pages
                    left.
                  summary: "Multiple results, more pages left"
                  value:
                    items:
                      - id: client-12
                      - id: client-5
                      - id: client-32
                      - id: my-client-id2
                      - id: my-client-id
                    _links:
                      next: /api/v1/mqtt/clients?cursor=a-MvelExpd5y0SrXBxDhBvnGmohbpzwGDQFdUyOYWBACqs1TgI4-cUo-A=&limit=5
                single-result:
                  description: Example response with one known client.
                  summary: Single result
                  value:
                    items:
                      - id: client-12
              schema:
                $ref: '#/components/schemas/ClientList'
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                      - title: Required parameter missing
                        detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "410":
          content:
            application/json:
              examples:
                cursor-invalid:
                  description: Cursor not valid anymore
                  summary: The passed cursor is not valid anymore
                  value:
                    errors:
                      - title: Cursor not valid anymore
                        detail: "The passed cursor is not valid anymore, you can request\
                        \ this resource without a cursor to start from the beginning"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Cursor not valid anymore
        "503":
          content:
            application/json:
              examples:
                version-check-failed:
                  description: Version check failed
                  summary: Version check failed
                  value:
                    errors:
                      - title: Endpoint not active yet
                        detail: "Not all cluster nodes support this endpoint yet, please\
                        \ try again later"
              schema:
                $ref: '#/components/schemas/Errors'
          description: Not all cluster nodes at minimum version
      summary: List all MQTT clients
      tags:
        - MQTT Clients
  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/clients/{clientId}:
    delete:
      description: |-
        Invalidates the client session for a client with the given client identifier. If the client is currently connected, it will be disconnected as well.

         If your client identifiers contain special characters, please make sure that the clientId is URL encoded (a.k.a. percent-encoding, as in RFC 3986).
      operationId: invalidateClientSession
      parameters:
        - description: The MQTT client identifier.
          in: path
          name: clientId
          required: true
          schema:
            type: string
        - description: Whether to prevent the will message.
          in: query
          name: preventWillMessage
          schema:
            type: boolean
            default: false
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          content:
            application/json: {}
          description: Success (no content)
        "400":
          content:
            application/json:
              examples:
                param-invalid:
                  description: Bad request
                  summary: Query parameter can not be parsed
                  value:
                    errors:
                      - title: Parameter invalid
                        detail: Query parameter 'parameter-name' is invalid
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Not found
                  summary: Not found
                  value:
                    errors:
                      - title: Resource not found
                        detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: Invalidate a client session
      tags:
        - MQTT Clients
    get:
      description: |-
        Returns detailed information for a specific client with it is current state.

         Including all session and connection information.
        If your client identifiers contain special characters, please make sure that the clientId is URL Encoded (a.k.a. percent-encoding, as in RFC 3986).
      operationId: getMqttClientDetails
      parameters:
        - description: The MQTT client identifier.
          in: path
          name: clientId
          required: true
          schema:
            type: string
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                offline-client:
                  description: Offline client
                  summary: offline-client
                  value:
                    client:
                      id: client-1
                      connected: false
                      sessionExpiryInterval: 12345
                      messageQueueSize: 543
                      willPresent: false
                online-client:
                  description: Online client
                  summary: online-client
                  value:
                    client:
                      id: client-2
                      connected: true
                      sessionExpiryInterval: 15000
                      connectedAt: 2020-07-20T14:59:50.580Z
                      messageQueueSize: 0
                      willPresent: false
                      restrictions:
                        maxMessageSize: 268435460
                        maxQueueSize: 1000
                        queuedMessageStrategy: DISCARD
                      connection:
                        keepAlive: 60
                        mqttVersion: MQTTv5
                        connectedListenerId: TCP Listener
                        connectedNodeId: bRIG4
                        cleanStart: true
                        sourceIp: 127.0.0.1
                online-client-tls-proxy:
                  description: Online client with TLS and Proxy Protocol enabled
                  summary: online-client-tls-proxy
                  value:
                    client:
                      id: client-1
                      connected: true
                      sessionExpiryInterval: 12345
                      connectedAt: 2020-07-17T14:47:59.704Z
                      messageQueueSize: 543
                      willPresent: true
                      restrictions:
                        maxMessageSize: 20000
                      connection:
                        keepAlive: 120
                        mqttVersion: 3.1.1
                        connectedListenerId: Tcp Listener
                        connectedNodeId: node1
                        username: username
                        password: cGFzc3dvcmQ=
                        cleanStart: true
                        sourceIp: 192.168.1.200
                        proxyInformation:
                          sourceIp: 127.0.0.2
                          sourcePort: 8080
                          destinationIp: 127.0.0.3
                          destinationPort: 50123
                          tlvs:
                            - key: PP2_TYPE_ALPN
                              value: "1"
                            - key: PP2_TYPE_AUTHORITY
                              value: "2"
                        tlsInformation:
                          cipherSuite: cipher_suite
                          tlsVersion: "1.2"
                          certificateInformation:
                            commonName: common-name
                            organization: org
                            organizationalUnit: org-unit
                            serial: "-3522625861374876620"
                            validFrom: 2020-07-20T14:56:02.000Z
                            validUntil: 2020-07-21T14:56:12.000Z
                            country: DE
                            state: BY
                            version: "2"
              schema:
                $ref: '#/components/schemas/ClientItem'
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                      - title: Required parameter missing
                        detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Not found
                  summary: Not found
                  value:
                    errors:
                      - title: Resource not found
                        detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: Get detailed client information
      tags:
        - MQTT Clients
  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/clients/{clientId}/connection:
    delete:
      description: |-
        Disconnects a specific client if its is currently connected.

         If your client identifiers contain special characters, please make sure that the clientId is URL Encoded (a.k.a. percent-encoding, as in RFC 3986).
      operationId: disconnectClient
      parameters:
        - description: The MQTT client identifier.
          in: path
          name: clientId
          required: true
          schema:
            type: string
        - description: Whether to prevent the will message.
          in: query
          name: preventWillMessage
          schema:
            type: boolean
            default: false
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          content:
            application/json: {}
          description: Success (no content)
        "400":
          content:
            application/json:
              examples:
                param-invalid:
                  description: Bad request
                  summary: Query parameter can not be parsed
                  value:
                    errors:
                      - title: Parameter invalid
                        detail: Query parameter 'parameter-name' is invalid
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Not found
                  summary: Not found
                  value:
                    errors:
                      - title: Resource not found
                        detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: Disconnect a client
      tags:
        - MQTT Clients
    get:
      description: |-
        Returns the information if a specific client is currently connected.

         If you are only interested in the connection status of a client prefer this endpoint over the the full client detail.
        If your client identifiers contain special characters, please make sure that the clientId is URL Encoded (a.k.a. percent-encoding, as in RFC 3986).
      operationId: getMqttClientConnectionState
      parameters:
        - description: The MQTT client identifier.
          in: path
          name: clientId
          required: true
          schema:
            type: string
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                online-client:
                  description: Online client
                  summary: online-client
                  value:
                    connection:
                      connected: false
              schema:
                $ref: '#/components/schemas/ConnectionItem'
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                      - title: Required parameter missing
                        detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Not found
                  summary: Not found
                  value:
                    errors:
                      - title: Resource not found
                        detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: Get a clients connection state
      tags:
        - MQTT Clients
  /api/v2/orgs/{orgId}/clusters/{clusterId}/mqtt/clients/{clientId}/subscriptions:
    get:
      description: |-
        List all subscriptions for a specific client.

        This endpoint does not support pagination with cursor at the moment, but it might be added in future versions. Please make sure to check if a cursor is returned and another page is available to have a future-proof implementation.
      operationId: getSubscriptionsForMqttClient
      parameters:
        - description: The MQTT client identifier.
          in: path
          name: clientId
          required: true
          schema:
            type: string
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                empty-result:
                  description: Empty result if client has no subscriptions.
                  summary: Empty result if client has no subscriptions
                  value:
                    items: []
                multiple-results:
                  description: Example response with multiple results.
                  summary: Multiple results
                  value:
                    items:
                      - topicFilter: topic/0
                        qos: AT_MOST_ONCE
                        retainHandling: SEND
                        retainAsPublished: true
                        noLocal: false
                        subscriptionIdentifier: 1
                      - topicFilter: topic/2
                        qos: EXACTLY_ONCE
                        retainHandling: SEND
                        retainAsPublished: false
                        noLocal: true
                        subscriptionIdentifier: 3
                      - topicFilter: $share/sharename/topic/1
                        qos: AT_LEAST_ONCE
                        retainHandling: DO_NOT_SEND
                        retainAsPublished: false
                        noLocal: false
                        subscriptionIdentifier: 2
              schema:
                $ref: '#/components/schemas/ClientSubscriptionList'
          description: Success
        "400":
          content:
            application/json:
              examples:
                param-missing:
                  description: Bad request
                  summary: Required URL parameter missing
                  value:
                    errors:
                      - title: Required parameter missing
                        detail: Required URL parameter 'parameterName' is missing
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad request
        "404":
          content:
            application/json:
              examples:
                not-found:
                  description: Not found
                  summary: Not found
                  value:
                    errors:
                      - title: Resource not found
                        detail: Resource with id 'my-resource-id' not found
              schema:
                $ref: '#/components/schemas/Errors'
          description: Resource not found
      summary: List all subscriptions for MQTT client
      tags:
        - MQTT Clients
  /api/v2/orgs/{orgId}/clusters/{clusterId}/clients-auth/certificate:
    get:
      tags:
        - Clients Authentication
      summary: Get Client Certificate
      description: Get Client Certificate
      operationId: getClientCertificate
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: getClientCertificate 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificate'
        '403':
          description: Forbidden action
        404:
          description: clusterId not found
    delete:
      tags:
        - Clients Authentication
      summary: Delete Client Certificate
      description: Delete Client Certificate
      operationId: deleteClientCertificate
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful operation
        '403':
          description: Forbidden action
        404:
          description: clusterId not found
    put:
      tags:
        - Clients Authentication
      summary: Put Client Certificate
      description: Put Client Certificate
      operationId: putClientCertificate
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: New client certificate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPublicKey'
        required: true
      responses:
        '200':
          description: putClientCertificate 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCertificate'
        '403':
          description: Forbidden action
        404:
          description: clusterId not found
  /api/v2/orgs/{orgId}/clusters/{clusterId}/clients-auth/jwt:
    get:
      tags:
        - Clients Authentication
      summary: Get Client JWT Config
      description: Get Client JWT Config
      operationId: getClientJWTAuthConfig
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: getClientJWTAuthConfig 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTAuthConfigResponse'
        '403':
          description: Forbidden action
        404:
          description: clusterId not found
    delete:
      tags:
        - Clients Authentication
      summary: Remove JWT Config to use ESE basic credentials
      description: Delete JWT Config to use ESE username & password
      operationId: deleteClientJWTAuthConfig
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful operation
        '403':
          description: Forbidden action
        404:
          description: clusterId not found
    put:
      tags:
        - Clients Authentication
      summary: Upsert JWT Config to use JWTs to auth clients
      description: Upsert JWT Config to use JWTs to auth clients
      operationId: putClientJWTAuthConfig
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: New JWT Config for clients authentication
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutJWTAuthConfig'
        required: true
      responses:
        '200':
          description: successful operation
        '403':
          description: Forbidden action
        404:
          description: clusterId not found
  /api/v2/orgs/{orgId}/clusters/{clusterId}/clients-auth/ese:
    get:
      tags:
        - Clients Authentication
      summary: Get Ese Global Role
      description: Get Ese Global Role
      operationId: getEseRole
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ese Global Config Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EseConfig'
        '403':
          description: Forbidden action
        404:
          description: clusterId not found
    put:
      tags:
        - Clients Authentication
      summary: Put Ese Global Role
      description: Put Ese Global Role
      operationId: putEseRole
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: New global ese config
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EseConfig'
      responses:
        '204':
          description: successful operation
        '403':
          description: Forbidden action
        404:
          description: clusterId not found
  /api/v2/orgs/{orgId}/clusters/{clusterId}/kafka:
    get:
      tags:
        - Kafka Extensions
      summary: Kafka extension configuration
      description: Return Kafka extension configuration
      operationId: getKafkaConfiguration
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaConfigResponse'
        '403':
          description: Forbidden action
        '404':
          description: clusterId not found
    put:
      tags:
        - Kafka Extensions
      summary: Upsert Kafka extension configuration
      description: Upsert Kafka extension configuration
      operationId: putKafkaConfiguration
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KafkaConfig"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseMessage'
        '403':
          description: Forbidden action
        '404':
          description: clusterId not found
    delete:
      tags:
        - Kafka Extensions
      summary: Delete Kafka extension configuration
      description: Delete Kafka extension configuration
      operationId: deleteKafkaConfiguration
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful operation
        '403':
          description: Forbidden action
        '404':
          description: clusterId not found
  /api/v2/orgs/{orgId}/clusters/{clusterId}/kafka/status:
    get:
      tags:
        - Kafka Extensions
      summary: Get Kafka status
      description: Get Kafka status
      operationId: getKafkaStatus
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: clusterId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaStatusResponse'
        '403':
          description: Forbidden action
        '404':
          description: clusterId not found
security:
  - bearerAuth: [ ]
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UpsertPermissionListRequest:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionWithRoles'
    PermissionWithRoles:
      type: object
      description: a single MQTT permission with roles list
      required:
        - name
        - topic
      properties:
        name:
          type: string
        description:
          type: string
        topic:
          type: string
        publishAllowed:
          type: boolean
        subscribeAllowed:
          type: boolean
        qos0Allowed:
          type: boolean
        qos1Allowed:
          type: boolean
        qos2Allowed:
          type: boolean
        retainedMsgsAllowed:
          type: boolean
        sharedSubAllowed:
          type: boolean
        sharedGroup:
          type: string
        roles:
          type: "array"
          items:
            type: "string"
    MqttRolePermissionsByRoleResponse:
      type: object
      description: MQTT permission object along with its ID in the DB which is used to assign permissions to roles.
      properties:
        permissions:
          $ref: '#/components/schemas/PermissionResp'
    PermissionResp:
      type: object
      properties:
        permissionInfo:
          $ref: '#/components/schemas/Permission'
    Permission:
      type: object
      description: a single MQTT permission, to be assigned to a role
      required:
        - name
        - topic
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        topic:
          type: string
        publishAllowed:
          type: boolean
        subscribeAllowed:
          type: boolean
        qos0Allowed:
          type: boolean
        qos1Allowed:
          type: boolean
        qos2Allowed:
          type: boolean
        retainedMsgsAllowed:
          type: boolean
        sharedSubAllowed:
          type: boolean
        sharedGroup:
          type: string
    KafkaStatusResponse:
      type: object
      properties:
        kafkaStatus:
          $ref: '#/components/schemas/KafkaStatus'
    KafkaConfigResponse:
      properties:
        kafkaConfig:
          $ref: '#/components/schemas/KafkaConfig'
    SuccessResponseMessage:
      properties:
        success:
          type: string
        msg:
          type: string
    KafkaStatus:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
    KafkaConfig:
      type: object
      properties:
        clusterId:
          type: string
        clientId:
          type: string
        bootstrapServers:
          type: array
          items:
            type: string
        provider:
          $ref: '#/components/schemas/Provider'
        kafkaAuthenticationSelected:
          $ref: '#/components/schemas/KafkaAuthenticationSelected'
        mqttToKafkaMapping:
          $ref: '#/components/schemas/MqttToKafkaMapping'
        KafkaToMqttMapping:
          $ref: '#/components/schemas/KafkaToMqttMapping'
        kafkaAuthenticationPlain:
          $ref: '#/components/schemas/kafkaAuthenticationPlain'
    Provider:
      type: string
      enum:
        - Kafka
        - ConfluentCloud
        - Aiven
    KafkaAuthenticationSelected:
      type: string
      enum:
        - PLAIN
        - SCRAM
        - KERBEROS
    kafkaAuthenticationPlain:
      properties:
        username:
          type: string
          example: "scooby"
        password:
          type: string
          example: "doo"
    MqttToKafkaMapping:
      type: object
      properties:
        mqttTopicFilters:
          type: array
          items:
            type: string
        kafkaTopic:
          type: array
          items:
            type: string
        kafkaAcks:
          $ref: '#/components/schemas/KafkaAcks'
        kafkaMaxRequestSizeBytes:
          type: integer
          format: int64
    KafkaToMqttMapping:
      type: object
      properties:
        kafkaTopic:
          type: array
          items:
            type: string
        useSchemaRegistry:
          $ref: '#/components/schemas/UseSchemaRegistry'
        mqttTopics:
          type: array
          items:
            type: string
        mqttPayload:
          $ref: '#/components/schemas/MqttPayload'
        mqttPublishFields:
          $ref: '#/components/schemas/MqttPublishFields'
    KafkaAcks:
      type: string
      enum:
        - ZERO
        - ONE
        - ACK
    UseSchemaRegistry:
      type: string
      enum:
        - none
        - local
        - confluent
    MqttPayload:
      type: string
      enum:
        - bytes
        - other
    PayloadFormatIndicator:
      type: string
      enum:
        - UTF8
        - UNSPECIFIED
    Qos:
      type: string
      enum:
        - atMostOnce
        - atLeastOnce
        - exactlyOnce
    MqttPublishFields:
      type: object
      properties:
        retainedFlag:
          type: boolean
        payloadFormatIndicator:
          $ref: '#/components/schemas/PayloadFormatIndicator'
        messageExpiryInterval:
          type: integer
          format: int64
        responseTopic:
          type: string
        correlationData:
          type: string
        contentType:
          type: string
        qos:
          $ref: '#/components/schemas/Qos'
        userProperties:
          type: object
          additionalProperties:
            type: string
    RolesListResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleResponse'
    RoleResponse:
      type: object
      properties:
        roleInfo:
          $ref: '#/components/schemas/RoleInfo'
    UpsertRoleRequest:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/Role'
    Role:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    UpsertCredentialsRequest:
      type: object
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
    CredentialsListResponse:
      type: object
      properties:
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/CredentialsResponse'
    RoleInfo:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int64
    UserInfo:
      type: object
      properties:
        username:
          type: string
        role:
          type: array
          items:
            type: string
    Credentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    CredentialsResponse:
      type: object
      properties:
        UserInfo:
          $ref: '#/components/schemas/UserInfo'

    UpsertPermissionRequest:
      type: object
      properties:
        permission:
          $ref: '#/components/schemas/MQTTPermission'

    MQTTPermission:
      type: object
      description: a single MQTT permission, to be assigned to a role
      required:
        - name
        - description
        - topic
        - publishAllowed
        - subscribeAllowed
        - qos0Allowed
        - qos1Allowed
        - qos2Allowed
        - retainedMsgsAllowed
      properties:
        name:
          type: string
        description:
          type: string
        topic:
          type: string
        publishAllowed:
          type: boolean
        subscribeAllowed:
          type: boolean
        qos0Allowed:
          type: boolean
        qos1Allowed:
          type: boolean
        qos2Allowed:
          type: boolean
        retainedMsgsAllowed:
          type: boolean
        sharedSubAllowed:
          type: boolean
        sharedGroup:
          type: string
        roles:
          type: "array"
          items:
            type: "object"
            properties:
              roleId:
                type: "string"
              roleName:
                type: "string"
        applyTo:
          type: string
          enum:
            - X509
            - JWT
            - ALL
          default: ALL
        variables:
          type: "array"
          items:
            type: "object"
            properties:
              keyField:
                type: "string"
              eseVariable:
                type: "string"
    MQTTPermissionResponse:
      type: object
      description: MQTT permission object along its ID in the DB which is used to assign permissions to roles
      required:
        - permissionInfo
      properties:
        permissionInfo:
          $ref: '#/components/schemas/MQTTPermission'
    MQTTRole:
      type: object
      description: a role to be used for granting an MQTT user a set of permissions
      properties:
        name:
          type: string
        description:
          type: string
        permissions:
          description: list of permission IDs mapped to the role. see MQTTPermission
          type: array
          items:
            type: integer
    RolePermissionResponse:
      type: object
      properties:
        roleName:
          type: string
        roleId:
          type: integer
          format: int64
        permissionId:
          type: integer
          format: int64
    RolePermissionsListResponse:
      type: object
      properties:
        rolePermissions:
          type: array
          items:
            $ref: '#/components/schemas/RolePermissionResponse'
    UserRolesListResponse:
      type: object
      properties:
        userRole:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleResponse'
    UserRoleResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
    Error:
      type: object
      properties:
        detail:
          type: string
          description: Detailed contextual description of this error
        title:
          type: string
          description: The type of this error
    Errors:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Client:
      type: object
      description: List of result items that are returned by this endpoint
      properties:
        id:
          type: string
    ClientDetails:
      type: object
      properties:
        connected:
          type: boolean
          description: If this client is connected
        connectedAt:
          type: string
          format: date-time
          description: Time the client connection was established
          nullable: true
        connection:
          $ref: '#/components/schemas/ConnectionDetails'
        id:
          type: string
          description: The MQTT client identifier
        messageQueueSize:
          type: integer
          format: int64
          description: The current message queue size for this client
        restrictions:
          $ref: '#/components/schemas/ClientRestrictions'
        sessionExpiryInterval:
          type: integer
          format: int64
          description: The session expiry interval
          nullable: true
        willPresent:
          type: boolean
          description: If a will is present for this client
    ClientItem:
      type: object
      properties:
        client:
          $ref: '#/components/schemas/ClientDetails'
    ClientList:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/PaginationCursor'
        items:
          type: array
          description: List of result items that are returned by this endpoint
          items:
            $ref: '#/components/schemas/Client'
    ClientRestrictions:
      type: object
      description: The restrictions that are in effect for this client
      nullable: true
      properties:
        maxMessageSize:
          type: integer
          format: int64
          description: maximum MQTT message size
          nullable: true
        maxQueueSize:
          type: integer
          format: int64
          description: maximum queue size
          nullable: true
        queuedMessageStrategy:
          type: string
          description: The queue strategy if the queue is full
          nullable: true
    ClientSubscription:
      type: object
      description: List of result items that are returned by this endpoint
      properties:
        noLocal:
          type: boolean
          description: The No Local flag
        qos:
          type: string
          description: The Quality of Service level
          enum:
            - AT_MOST_ONCE
            - AT_LEAST_ONCE
            - EXACTLY_ONCE
        retainAsPublished:
          type: boolean
          description: The Retain As Published flag
        retainHandling:
          type: string
          description: Retain handling option
          enum:
            - SEND
            - SEND_IF_NEW_SUBSCRIPTION
            - DO_NOT_SEND
        subscriptionIdentifier:
          type: integer
          format: int32
          description: The subscription identifier
          nullable: true
        topicFilter:
          type: string
          description: The MQTT topic filter
    ClientSubscriptionList:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/PaginationCursor'
        items:
          type: array
          description: List of result items that are returned by this endpoint
          items:
            $ref: '#/components/schemas/ClientSubscription'
    Connection:
      type: object
      description: Information about the client's connection state
      properties:
        connected:
          type: boolean
          description: If this client is currently connected
    ConnectionDetails:
      type: object
      description: Information about the clients connection
      nullable: true
      properties:
        cleanStart:
          type: boolean
          description: Clean start flag
        connectedListenerId:
          type: string
          description: Id of the HiveMQ listener the client is connected to
        connectedNodeId:
          type: string
          description: Id of the HiveMQ node the client is connected to
        keepAlive:
          type: integer
          format: int32
          description: Connection Keep Alive in seconds
          nullable: true
        mqttVersion:
          type: string
          description: MQTT version of the client
        password:
          type: string
          format: byte
          description: Password
          nullable: true
        proxyInformation:
          $ref: '#/components/schemas/ProxyInformation'
        sourceIp:
          type: string
          description: The client's IP
          nullable: true
        tlsInformation:
          $ref: '#/components/schemas/TlsInformation'
        username:
          type: string
          description: Username
          nullable: true
    ConnectionItem:
      type: object
      properties:
        connection:
          $ref: '#/components/schemas/Connection'
    PaginationCursor:
      type: object
      description: Links for pagination
      nullable: true
      properties:
        next:
          type: string
    ProxyInformation:
      type: object
      description: Proxy Protocol information
      nullable: true
      properties:
        destinationIp:
          type: string
          description: The client's destination IP as seen by the proxy
        destinationPort:
          type: integer
          format: int32
          description: The client's destination port as seen by the proxy
        sourceIp:
          type: string
          description: The client's IP as seen by the proxy
        sourcePort:
          type: integer
          format: int32
          description: The client's Port as seen by the proxy
        tlvs:
          type: array
          description: Additional TLV fields contained in the proxy protocol information
          items:
            $ref: '#/components/schemas/TLV'
          nullable: true
    TlsInformation:
      type: object
      description: TLS information
      nullable: true
      properties:
        certificateInformation:
          $ref: '#/components/schemas/CertificateInformation'
        cipherSuite:
          type: string
          description: The used cipher suite
        tlsVersion:
          type: string
          description: The used TLS version
    TLV:
      type: object
      description: Additional TLV fields contained in the proxy protocol information
      nullable: true
      properties:
        key:
          type: string
          description: TLV Key
        value:
          type: string
          description: TLV value
    CertificateInformation:
      type: object
      description: The client certificate sent by the client
      nullable: true
      properties:
        commonName:
          type: string
          description: Common name
          nullable: true
        country:
          type: string
          description: Country
          nullable: true
        organization:
          type: string
          description: Organization
          nullable: true
        organizationalUnit:
          type: string
          description: Organizational unit
          nullable: true
        serial:
          type: string
          description: The certificates serial
          nullable: true
        state:
          type: string
          description: State
          nullable: true
        validFrom:
          type: string
          format: date-time
          description: Valid from date
        validUntil:
          type: string
          format: date-time
          description: Valid until date
        version:
          type: string
          description: Certificate version
          nullable: true
    ClientCertificate:
      required:
        - clientCert
      type: object
      properties:
        clientCert:
          $ref: '#/components/schemas/PublicKey'
    PublicKey:
      description: client public key
      type: object
      required:
        - name
        - key
        - createdAt
      properties:
        name:
          type: string
          example: certname
          description: Client certificate name
        key:
          type: string
          description: Base64 encoded client certificate pem key
          example: P+Hc5bBWNvmCjXH58PbLVakwltg==
        createdAt:
          type: string
          format: date
        roleName:
          type: string
          description: default authorization role name
          example: allow-all-permissions
    NewPublicKey:
      type: object
      required:
        - name
        - key
      properties:
        name:
          type: string
          example: certname
          description: Client certificate name
        key:
          type: string
          description: Base64 encoded client certificate pem key
          example: P+Hc5bBWNvmCjXH58PbLVakwltg==
        roleName:
          type: string
          description: default authorization role name
          example: allow-all-permissions
    JWTAuthConfigResponse:
      type: object
      properties:
        jwtData:
          $ref: '#/components/schemas/JWTAuthConfig'
    JWTAuthConfig:
      description: JWT config to auth clients
      type: object
      required:
        - jwksEndpoint
        - claims
      properties:
        claims:
          type: object
          additionalProperties:
            type: string
          description: Reserved & Custom claims - key-value pair that are provided in the payload of the JWT and are used to assert information about the bearer of the token.
          example:
            iss: jwt-service
            sub: my-mqtt-client
            aud: hivemq.com
            iat: 1573567292
            exp: 1573653692
            scope: [
              "publish",
              "subscribe"
            ]
        jwksEndpoint:
          type: string
          example: https://jwt-service/keys
          description:  set of public keys that the JWT provider issues for verification of the JWTs.https://datatracker.ietf.org/doc/html/rfc7519
        roleName:
          type: string
          description: default authorization role name
          example: allow-all-permissions
        introspectionEndpoint:
          type: string
          example: https://jwt-service/token/introspect
          description: Introspection is an optional method to online verify the validity of a token, after it was issued.
        simpleAuth:
          type: object
          properties:
            username:
              type: string
              example: ese
              description: Defines the HTTP Simple Auth parameters that are used for introspection requests from ESE to the identity server.
            password:
              type: string
              description: Defines the HTTP Simple Auth parameters that are used for introspection requests from ESE to the identity server.
              example: client-secret
        createdAt:
          type: string
          format: date
    PutJWTAuthConfig:
      type: object
      description: Put Jwt Auth Body
      required:
        - jwtData
      properties:
        jwtData:
          $ref: '#/components/schemas/NewJWTAuthConfig'
    NewJWTAuthConfig:
      description: JWT config to auth clients
      type: object
      required:
        - jwksEndpoint
        - claims
      properties:
        claims:
          type: object
          additionalProperties:
            type: string
          description: Reserved & Custom claims - key-value pair that are provided in the payload of the JWT and are used to assert information about the bearer of the token.
          example:
            iss: jwt-service
            sub: my-mqtt-client
            aud: hivemq.com
            iat: 1573567292
            exp: 1573653692
            scope: [
              "publish",
              "subscribe"
            ]
        jwksEndpoint:
          type: string
          example: https://jwt-service/keys
          description:  set of public keys that the JWT provider issues for verification of the JWTs.https://datatracker.ietf.org/doc/html/rfc7519
        roleName:
          type: string
          description: default authorization role name
          example: allow-all-permissions
        introspectionEndpoint:
          type: string
          example: https://jwt-service/token/introspect
          description: Introspection is an optional method to online verify the validity of a token, after it was issued.
        simpleAuth:
          type: object
          properties:
            username:
              type: string
              example: ese
              description: Defines the HTTP Simple Auth parameters that are used for introspection requests from ESE to the identity server.
            password:
              type: string
              description: Defines the HTTP Simple Auth parameters that are used for introspection requests from ESE to the identity server.
              example: client-secret
    EseConfig:
      description: ese global config
      type: object
      properties:
        roleName:
          type: string
          example: allow-all-permissions
          description: default authorization role name
