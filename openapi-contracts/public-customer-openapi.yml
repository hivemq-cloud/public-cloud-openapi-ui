openapi: 3.0.3
servers:
  - url: https://{baseUrl}
    description: The production API server
    variables:
      baseUrl:
        default: api.apigwuri.notset
info:
  title: HiveMQ Apiary Public API 1.0
  description: |-
    TBD
  contact:
    email: support@hivemq.com
  license:
    name: TBD - Do we have any license?
  version: 1.0.11
externalDocs:
  description: HiveMQ documentation
  url: http://hivemq.com
tags:
  - name: MQTT Credentials
    description: Manage MQTT credentials
    externalDocs:
      description: Find out more
      url: http://hivemq.com
  - name: MQTT Permissions
    description: Manage MQTT permissions
    externalDocs:
      description: Find out more
      url: http://hivemq.com
  - name: MQTT Roles
    description: Manage MQTT Roles
    externalDocs:
      description: Find out more
      url: http://hivemq.com
  - name: User - Roles
    description: User - Roles Management
    externalDocs:
      description: Find out more
      url: http://hivemq.com
paths:
  /api/v2/orgs/{orgId}/clusters/{hiveId}/mqtt/credentials:
    post:
      tags:
        - MQTT Credentials
      summary: Creates new credentials
      operationId: createMqttCredentials
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertCredentialsRequest"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Account, cluster, org, etc. does not exist
  /api/v2/orgs/{orgId}/clusters/{hiveId}/mqtt/credentials/username/{username}:
    get:
      tags:
        - MQTT Credentials
      summary: Get MQTT credentials by username
      operationId: getCredentials
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialsListResponse"
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Either Org, hiveId or username do not exist
    delete:
      tags:
        - MQTT Credentials
      summary: Delete credentials
      operationId: deleteMqttCredentials
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully deleted
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Account, cluster, org, etc. does not exist

  /api/v2/orgs/{orgId}/clusters/{hiveId}/mqtt/permissions:
    get:
      tags:
        - MQTT Permissions
      summary: List all valid permissions for MQTT users in a selected cluster.
      operationId: listMqttPermissions
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List all valid permissions for the given cluster.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MQTTPermissionResponse'
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
    post:
      tags:
        - MQTT Permissions
      summary: Create a new permission to assign to MQTT users
      operationId: createMqttPermission
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertPermissionRequest"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MQTTPermissionResponse"
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Account, cluster, org, etc. does not exist

  /api/v2/orgs/{orgId}/clusters/{hiveId}/mqtt/permissions/{id}:
    delete:
      tags:
        - MQTT Permissions
      summary: Delete permission
      operationId: deleteMqttPermission
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully deleted
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Account, cluster, org, etc. does not exist

  /api/v2/orgs/{orgId}/clusters/{hiveId}/mqtt/roles:
    get:
      tags:
        - MQTT Roles
      summary: List all valid roles for MQTT users in a selected cluster.
      operationId: listMqttRoles
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List all valid roles for the given cluster.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RolesListResponse'
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
    post:
      tags:
        - MQTT Roles
      summary: Create a new role for MQTT credentials
      operationId: createMqttRoles
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertRoleRequest"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleInfo"
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Account, cluster, org, etc. does not exist
  /api/v2/orgs/{orgId}/clusters/{hiveId}/mqtt/roles/{roleName}:
    delete:
      tags:
        - MQTT Roles
      summary: Delete role
      operationId: deleteMqttRole
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully deleted
        400:
          description: Missing parameter or otherwise incorrect request
        404:
          description: Either orgId, cluster, org or roleName. does not exist
  /api/v2/orgs/{orgId}/clusters/{hiveId}/mqtt/roles/{roleName}/permissions:
    get:
      tags:
        - MQTT Roles
      summary: List all valid roles for MQTT users in a selected cluster.
      operationId: listRolePermissions
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List role permissions for the given cluster.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RolePermissionsListResponse'
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
  /api/v2/orgs/{orgId}/clusters/{hiveId}/mqtt/roles/{roleId}/permissions/{permissionId}/attach:
    put:
      tags:
        - MQTT Roles
      summary: Attach permission to role
      operationId: attachRolePermission
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Attached permission to role for the given cluster.
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
  /api/v2/orgs/{orgId}/clusters/{hiveId}/mqtt/roles/{roleId}/permissions/{permissionId}/detach:
    put:
      tags:
        - MQTT Roles
      summary: Detach permission from role
      operationId: detachRolePermission
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detached permission from role for the given cluster.
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
  /api/v2/orgs/{orgId}/clusters/{hiveId}/user/{username}/roles:
    get:
      tags:
        - User - Roles
      summary: List all roles by user
      operationId: listUserRoles
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List users / roles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRolesListResponse'
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
  /api/v2/orgs/{orgId}/clusters/{hiveId}/user/{username}/roles/{roleName}/detach:
    put:
      tags:
        - User - Roles
      summary: detach user role
      operationId: detachUserRole
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: role detached successfully.
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.
  /api/v2/orgs/{orgId}/clusters/{hiveId}/user/{username}/roles/{roleName}/attach:
    put:
      tags:
        - User - Roles
      summary: attach user role
      operationId: attachUserRole
      parameters:
        - name: orgId
          in: path
          description: Organisation ID
          required: true
          schema:
            type: string
        - name: hiveId
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: role attached successfully.
        404:
          description: If no cluster is found for the current user return a not found
            response.
        422:
          description: If the cluster is not running return a unprocessable entity
            response.

security:
  - bearerAuth: [ ]
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RolesListResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleResponse'
    RoleResponse:
      type: object
      properties:
        roleInfo:
          $ref: '#/components/schemas/RoleInfo'
    UpsertRoleRequest:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/Role'
    Role:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    UpsertCredentialsRequest:
      type: object
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
    CredentialsListResponse:
      type: object
      properties:
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/CredentialsResponse'
    RoleInfo:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int64
    UserInfo:
      type: object
      properties:
        username:
          type: string
        role:
          type: array
          items:
            type: string
    Credentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    CredentialsResponse:
      type: object
      properties:
        UserInfo:
          $ref: '#/components/schemas/UserInfo'

    UpsertPermissionRequest:
      type: object
      properties:
        permission:
          $ref: '#/components/schemas/MQTTPermission'

    MQTTPermission:
      type: object
      description: a single MQTT permission, to be assigned to a role
      required:
        - name
        - description
        - topic
        - publishAllowed
        - subscribeAllowed
        - qos0Allowed
        - qos1Allowed
        - qos2Allowed
        - retainedMsgsAllowed
        - sharedSubAllowed
        - sharedGroup
      properties:
        name:
          type: string
        description:
          type: string
        topic:
          type: string
        publishAllowed:
          type: boolean
        subscribeAllowed:
          type: boolean
        qos0Allowed:
          type: boolean
        qos1Allowed:
          type: boolean
        qos2Allowed:
          type: boolean
        retainedMsgsAllowed:
          type: boolean
        sharedSubAllowed:
          type: boolean
        sharedGroup:
          type: string
    MQTTPermissionResponse:
      type: object
      description: MQTT permission object along its ID in the DB which is used to assign permissions to roles
      required:
        - permissionInfo
      properties:
        permissionInfo:
          $ref: '#/components/schemas/MQTTPermission'

    RolePermissionResponse:
      type: object
      properties:
        roleName:
          type: string
        roleId:
          type: integer
          format: int64
        permissionId:
          type: integer
          format: int64
    RolePermissionsListResponse:
      type: object
      properties:
        rolePermissions:
          type: array
          items:
            $ref: '#/components/schemas/RolePermissionResponse'
    UserRolesListResponse:
      type: object
      properties:
        userRole:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleResponse'
    UserRoleResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
